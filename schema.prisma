// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName String?
 otherName String?
  role      Role
  createdAt DateTime @default(now())
  student      Student?
  administrator Administrator?
}

model Student {
  id         String  @id @default(uuid())
  matricNo   String  @unique
  department String
  eligible   Boolean @default(true)
  wallet     String?  @unique
  user       User    @relation(fields: [id], references: [id])
  candidate  Candidate[]
  Vote Vote[]
}

model Administrator {
  id    String @id @default(uuid())
  user  User   @relation(fields: [id], references: [id], onDelete: Cascade)
}
model Election {
  id              String        @id @default(uuid())
  title           String
  academicSession String
  description     String?
  type            ElectionType
  department      String?  // Only required for departmental elections
  startDate       DateTime
  endDate         DateTime
  status          ElectionStatus @default(UPCOMING)
  liveStatus      LiveStatus     @default(NOT_LIVE)
  smartContractId String?        @unique  // Stores blockchain contract address (optional)
  positions       Position[]

  createdAt       DateTime @default(now())
}


enum LiveStatus {
  LIVE        // Pushed to the blockchain, students can vote
  NOT_LIVE    // Draft, not yet pushed
}


model Position {
  id         String     @id @default(uuid())
  title      String
  description String?
  election   Election  @relation(fields: [electionId], references: [id])
  electionId String
  candidates Candidate[]
}

model Candidate {
  id         String   @id @default(uuid())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  manifesto  String?
  votes      Vote[]
}

model Vote {
  id          String   @id @default(uuid())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime @default(now())

  @@unique([studentId, candidateId])
}

enum ElectionType {
  DEPARTMENTAL
  OPEN
}

enum ElectionStatus {
  ONGOING
  COMPLETED
  UPCOMING
}

enum Role {
  STUDENT
  ADMIN
}
